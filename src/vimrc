call plug#begin('~/.vim/plugged')
"Plug 'tpope/vim-sensible'
" On-demand loading
" Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'airblade/vim-gitgutter'
call plug#end()

if exists('&signcolumn')  " Vim 7.4.2201
  set signcolumn=yes
else
  let g:gitgutter_sign_column_always = 1
endif
set updatetime=1000

" Indentation
set expandtab
set smarttab
set shiftwidth=2
set tabstop=2
set softtabstop=2
set ai "Auto indent; basic
" set si "Smart indent; see also cindent; incompatible with “filetype plugin
" indent on”
filetype plugin indent on

set wrap "Wrap lines

" set autochdir

" Search behaviour similar to emacs’
set ignorecase
set infercase
if exists("&wildignorecase")
   set wildignorecase
endif
set smartcase
set hlsearch
set incsearch

" Use menu to show command-line completion (in 'full' case)
set wildmenu

" Set command-line completion mode:
"   - on first <Tab>, when more than one match, list all matches and complete
"     the longest common  string
"   - on second <Tab>, complete the next full match and show menu
set wildmode=list:longest,full

" Environment
set lazyredraw
set encoding=utf8
set nobackup
set nowb
set noswapfile

" Enable syntax highlighting
syntax enable

" SCSS === CSS
autocmd BufNewFile,BufRead *.scss set ft=scss.css
autocmd BufNewFile,BufRead *.mu set ft=html.mu
autocmd BufNewFile,BufRead *.mustache set ft=html.mu
"autocmd BufNewFile,BufRead *.html.twig set ft=html
au BufRead,BufNewFile *.twig set syntax=htmldjango
au BufRead,BufNewFile *.txt,*.tex,*.nd set wrap linebreak nolist textwidth=0 wrapmargin=0
au BufNewFile,BufRead *.ts,*.tsx set ft=javascript

" Return to last edit position when opening files
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif

set viminfo^=% " Remember info about open buffers on close
set hidden " Allow switching buffers even if unsaved

" Delete trailing white space on save
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc
autocmd BufWrite * :call DeleteTrailingWS()
autocmd BufWrite * :call DeleteTrailingWS()

augroup CursorLine
   au!
   au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
   au WinLeave * setlocal nocursorline
augroup END
:hi CursorLine   cterm=NONE ctermbg=NONE ctermfg=NONE
" No cursor line except in insert mode
:autocmd InsertEnter,InsertLeave * set cul!
" same as
":autocmd InsertEnter * set cul
":autocmd InsertLeave * set nocul

set foldmethod=indent

set laststatus=2
set statusline=%f\ %2*%m\ %1*%h%r%=[%{&encoding}\ %{&fileformat}\ %{strlen(&ft)?&ft:'none'}\ %{getfperm(@%)}]\ 0x%B\ %12.(%c:%l/%L%)
" set statusline to change colour based on mode
if version >= 700
    " cterm is used for st, rxvt
    au InsertEnter * hi StatusLine term=reverse ctermbg=5 gui=undercurl guibg=Magenta
    au InsertLeave * hi StatusLine term=reverse ctermbg=2 gui=bold,reverse
endif

set nohlsearch

map ; :

nnoremap / /\v
vnoremap / /\v

" nmap ,, :buffers<cr>
nnoremap ,, :ls<CR>:buffer<Space>

set pastetoggle=<F9>

set showcmd

let mapleader = " " " Leader is the space key
let g:mapleader = " "
nmap <leader>w :w<cr>
nmap <leader>x :x<cr>

nmap <c-l> :bn<cr>
nmap <c-h> :bp<cr>

imap <c-o> <Esc>:w<cr>
imap <c-s-o> <Esc>:x<cr>

imap jj <ESC>

function! NumberToggle()
    if(&number == 0)
        set number
    elseif(&relativenumber == 0)
        set relativenumber
    else
        set nonumber
        set norelativenumber
    endif
endfunc
nnoremap <C-n> :call NumberToggle()<cr>
autocmd BufNewFile,BufRead * set number

nmap <C-f> :buf

" Works if vim was compiled with +xterm_clipboard (run vim --version to know)
" Here requires install of vim-gnome or the like, which are much slower
" Update: possibly due to incorrectly set env vars (DISPLAY for instance)
" Aliasing vim to vim -X solves problem
" Update: appears that this is normal behaviour, but the -X option makes
" clipboard unavailable
" nmap <C-p> "+p

nmap <C-j> :normal o<Enter>
nmap <C-k> :normal O<Enter>

set pastetoggle=<C-p>

hi MatchParen ctermfg=red ctermbg=NONE cterm=bold
hi LineNr ctermfg=grey
hi Visual ctermbg=238

" Do not freeze on long lines (syntax colouring)
set synmaxcol=400

" Show some invisble characters
set listchars=tab:>-,trail:~,extends:>,precedes:<,nbsp:&,conceal:æ " Note: eol:$ removed (too annoying)
" set list
hi NonText ctermfg=cyan ctermbg=NONE cterm=bold
hi SpecialKey ctermfg=cyan ctermbg=NONE cterm=bold

nmap :w<cr> :up<cr>

nmap ´ :b#<cr> " When C-6 doesn’t work

nmap <leader>D "_D " Delete line without yanking; otherwise use "<num>p, <num=0> being the latest actually yanked item in register; see <leader>p
nmap <leader>p "0p

nmap :wbd<cr> :w<cr> <bar> :bd<cr>

noremap :2t<cr> :set shiftwidth=2 softtabstop=2 tabstop=2<cr>
noremap :4t<cr> :set shiftwidth=4 softtabstop=4 tabstop=4<cr>

" Not all satisfied with this
" Search in all buffers
" Usage: :Bufgrep/foo/
function! BuffersList()
  let all = range(0, bufnr('$'))
  let res = []
  for b in all
    if buflisted(b)
      call add(res, bufname(b))
    endif
  endfor
  return res
endfunction
function! GrepBuffers (expression)
  exec 'vimgrep/'.a:expression.'/ '.join(BuffersList())
endfunction
command! -nargs=+ GrepBufs call GrepBuffers(<q-args>)
